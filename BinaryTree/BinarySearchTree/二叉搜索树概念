From link http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9
#二叉查找树
二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树
（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：

    若任意节点的左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值；
    任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
    任意节点的左、右子树也分别为二叉查找树。
    没有键值相等的节点（英语：no duplicate nodes）。

二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低。为O(log n)。二叉查找树是基础性数据结构，用于
构建更为抽象的数据结构，如集合、multiset、关联数组等。

二叉查找树的查找过程和次优二叉树类似，通常采取二叉链表作为二叉查找树的存储结构。中序遍历二叉查找树可得到一个关键字
的有序序列，一个无序序列可以通过构造一棵二叉查找树变成一个有序序列，构造树的过程即为对无序序列进行查找的过程。
每次插入的新的结点都是二叉查找树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为
非空即可。搜索、插入、删除的复杂度等于树高，期望O(\log n)，最坏O(n)（数列有序，树退化成线性表）。

虽然二叉查找树的最坏效率是O(n),但它支持动态查询,且有很多改进版的二叉查找树可以使树高为O(\log n),
如SBT,AVL树,红黑树等.故不失为一种好的动态查找方法.

二叉查找树的查找算法

在二叉查找树b中查找x的过程为：

    若b是空树，则搜索失败，否则：
    若x等于b的根节点的数据域之值，则查找成功；否则：
    若x小于b的根节点的数据域之值，则搜索左子树；否则：
    查找右子树。
Status SearchBST(BTree* T, const KeyType &x, BTree &position) {
    if (!T) {
        position = NULL;
        return false;
    }
    if (x == T->data.key) {
        position = T;
        return true;
    } else if (x < T->data.key) {
        return SearchBST(T->lChild, x, position);
    } else if (x > T->data.key) {
        return SearchBST(T->rChild, x, position);
    }
}
在二叉查找树插入节点的算法
向一个二叉查找树b中插入一个节点s的算法，过程为：

    若b是空树，则将s所指结点作为根节点插入，否则：
    若s->data等于b的根节点的数据域之值，则返回，否则：
    若s->data小于b的根节点的数据域之值，则把s所指节点插入到左子树中，否则：
    把s所指节点插入到右子树中。（！！新插入节点总是叶子节点！！）
Status InsertBST(BTree &T, ElemType e) {
    if (!T) {
        T = new BTreeNode;
        T->data = e;
        T->lChild T->rChild = NULL;
        return true;
    }
    else if (e.key = T->data.key) return false; //不能有相同的元素
    else if (e.key < T->data.key) InsertBST(T->lChild, e);
    else {InsertBST(T->rChild, e);}
}
